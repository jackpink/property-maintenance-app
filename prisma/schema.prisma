// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Room {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  label     String
  order     Int?
  Level     Level         @relation(fields: [levelId], references: [id])
  levelId   String
  jobs      Job[]
  photos    Photo[]
  products  ProductItem[]

  @@index([levelId])
}

model Level {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  label      String
  order      Int?
  rooms      Room[]
  Property   Property @relation(fields: [propertyId], references: [id])
  propertyId String

  @@index([propertyId])
}

model Property {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  apartment       String?
  streetNumber    String
  street          String
  suburb          String
  postcode        String
  state           String
  country         String
  type            String?
  bedrooms        Int?
  bathrooms       Int?
  carSpaces       Int?
  landSize        Int?
  floorSize       Int?
  height          Int?
  wallType        String?
  levels          Level[]
  jobs            Job[]
  documentGroups  DocumentGroup[]
  homeowner       HomeownerUser?  @relation(fields: [homeownerUserId], references: [id])
  homeownerUserId String?

  @@index([homeownerUserId])
}

model Document {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now())
  label           String
  filename        String?
  DocumentGroup   DocumentGroup? @relation(fields: [documentGroupId], references: [id])
  documentGroupId Int?

  @@index([documentGroupId])
}

model DocumentGroup {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  label        String
  Contractor   Contractor? @relation(fields: [contractorId], references: [id])
  contractorId String?
  Job          Job?        @relation(fields: [jobId], references: [id])
  jobId        String?
  Product      Product?    @relation(fields: [productId], references: [id])
  productId    String?
  Property     Property?   @relation(fields: [propertyId], references: [id])
  propertyId   String?
  order        Int?
  documents    Document[]

  @@index([contractorId])
  @@index([jobId])
  @@index([productId])
  @@index([propertyId])
}

enum DocumentGroupParent {
  PROPERTY
  JOB
  PRODUCT
}

model Photo {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  filename  String
  Job       Job?     @relation(fields: [jobId], references: [id])
  jobId     String?
  Room      Room?    @relation(fields: [roomId], references: [id])
  roomId    String?

  @@index([jobId])
  @@index([roomId])
}

model Logo {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  filename     String
  Contractor   Contractor? @relation(fields: [contractorId], references: [id])
  contractorId String?     @unique

  @@index([contractorId])
}

model Job {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  title      String
  Property   Property @relation(fields: [propertyId], references: [id])
  propertyId String

  photos            Photo[]
  rooms             Room[]
  products          ProductItem[]
  date              DateTime
  Contractor        Contractor?     @relation(fields: [tradeUserId], references: [id])
  tradeUserId       String?
  notes             String?         @db.VarChar(2000)
  tradeNotes        String?         @db.VarChar(2000)
  nonUserTradeName  String?
  nonUserTradeEmail String?
  nonUserTradePhone String?
  tag               TagEnum?
  documentGroups    DocumentGroup[]

  @@index([propertyId])
  @@index([tradeUserId])
}

enum TagEnum {
  ELECTRICAL
  PLUMBING
  CARPENTRY
  AIRCONDITIONING
  IT
  AV
  PAINTING
  TILING
  ROOFING
  GARDENING
  CLEANING
  OTHER
}

model Contractor {
  id             String          @id
  createdAt      DateTime        @default(now())
  jobs           Job[]
  companyName    String
  licenses       DocumentGroup[]
  dataStorage    Int             @default(0) //in bytes
  aboutStatement String?         @db.VarChar(2000)
  tag            TagEnum?
  website        String?
  logo           Logo?
}

model HomeownerUser {
  id          String     @id
  createdAt   DateTime   @default(now())
  properties  Property[]
  dataStorage Int        @default(0) //in bytes
}

model Product {
  id           String          @id @default(cuid())
  createdAt    DateTime        @default(now())
  label        String
  manufacturer String?
  model        String?
  order        Int?
  productItems ProductItem[]
  documents    DocumentGroup[]
}

model ProductItem {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  notes          String?   @db.VarChar(2000)
  tradeNotes     String?   @db.VarChar(2000)
  Room           Room      @relation(fields: [roomId], references: [id])
  roomId         String
  Job            Job?      @relation(fields: [jobId], references: [id])
  jobId          String?
  installDate    DateTime?
  warrantyPeriod Int?
  Product        Product   @relation(fields: [productId], references: [id])
  productId      String
  tag            TagEnum?

  @@index([roomId])
  @@index([jobId])
  @@index([productId])
}
